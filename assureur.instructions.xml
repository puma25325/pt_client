<task_definition>
    <meta>
        <name>Assureur registration</name>
        <description>Automated signup, search for prestataire, contact a prestataire, add a mission to a prestataire</description>
        <priority>high</priority>
        <estimated_duration>2-3 hours</estimated_duration>
    </meta>

    <prerequisites>
        <dependencies>
            <import> use import { gql } from 'graphql-tag'; for gql when creating a graphql query/mutation/subscription</import>
            <tool>vue-sooner toast and shadcn Toaster for presenting information about success or errors </tool>
        </dependencies>
    </prerequisites>


    <workflow>
        <step id="1" name="signup" depends_on="none">
            <description>create a new Assureur account</description>
            <actions>
                <action>navigate to /pro-registration</action>
                <action>clicking to "S'inscrire comme Assureur" should show a formulare of type assureur (AccountType)</action>
                <action>use shadcn forms for the form, also use form validation for the input</action>
                <action>create a store for assureur inside /stores</action>
                <action>create a method to get the siret information from GET https://api.insee.fr/entreprises/sirene/V3/siret/{numeroSiret}</action>
                <action>verifier button actually call the siret method created</action>
                <action>use the response to fill CompanyInfo data</action>
                <action>Contact référant is also Contact interface that also need to be put in the shadcn form and validated</action>
                <action>Informations assureur form also need to be put in the shadcn form and validated</action>
                <action>Création du compte has email, password and confirmation mot de passe, this also need to be put inside the shadcn form and validated</action>
                <action>Clicking on "finaliser l'inscription" need to call a assureur signup method insode the assureur store method , this method need to be connected to graphql</action>
                <action>please create corresponding function inside the msw handler under /mock</action>
                <action>add playwright data-testid ids to the form inputs and buttons</action>
                <action>write playwright tests please see inside /e2e folder</action>
            </actions>
            <success_criteria>
                <criterion>User account created successfully</criterion>
                <criterion>should redirect to /assureur-dashboard</criterion>
                <criterion>a token with (toke, expersIn, refresh_token) should be returned and saved in the local storage</criterion>
            </success_criteria>
            <errors_handling>
                <if_condition error="form_validation_error">display error message and fail gracefully</if_condition>
                <if_condition error="graphql call error"> should display an error via the toaster and fail gracefully</if_condition>
            </errors_handling>
        </step>
        <step id="2" name="search" depends_on="1">
            <description>search for a prestataire</description>
            <actions>
                <action>inside the assurreur store please create a method to search for a prestataire that takes all the filters of Filtres de recherche</action>
                <action>create the corresponding graphql query and connect it to the store function</action>
                <action>add msw test handler method inside /mock</action>
                <action>add playwright data-testid ids to the inputs and buttons</action>
                <action>write playwright tests please see inside /e2e folder</action>
                <action>its the rechercher button that need to fire the method</action>
            </actions>
            <success_criteria>
                <criterion>should return an empty list or a list of prestataires (type Prestataire)</criterion>
            </success_criteria>
            <errors_handling>
                <if_condition error="graphql call error"> should display an error via the toaster and fail gracefully</if_condition>
            </errors_handling>
        </step>
    </workflow>
</task_definition>