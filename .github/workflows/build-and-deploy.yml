name: Deploy client

on:
  push:
    branches: [master, main]

permissions:
  contents: write
  pages: write
  id-token: write
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # e2e-tests:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 30
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Setup Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Install Playwright browsers
  #       run: npx playwright install --with-deps

  #     - name: Run E2E tests
  #       run: npx playwright test --config=playwright.ci.config.ts
  #       env:
  #         CI: true
  #         DEV: true
  #         VITE_ENABLE_MSW: true
  #         PLAYWRIGHT_TEST_TIMEOUT: 120000
  #         PLAYWRIGHT_EXPECT_TIMEOUT: 45000
  #       continue-on-error: false

  #     - name: Upload test results
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: playwright-report
  #         path: playwright-report/
  #         retention-days: 30
          
  #     - name: Upload test videos
  #       uses: actions/upload-artifact@v4
  #       if: failure()
  #       with:
  #         name: test-videos
  #         path: test-results/
  #         retention-days: 30

  create-release:
    # needs: [e2e-tests]
    needs: []
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Get current version
        id: current_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Increment version
        id: version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          PATCH=$((VERSION_PARTS[2] + 1))
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update package.json version
        run: |
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "Bump version to ${{ steps.version.outputs.version }}"
          git push

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: Release ${{ steps.version.outputs.tag }}
          body: |
            Release ${{ steps.version.outputs.tag }}
            
            Changes:
            - Automated release from CI/CD pipeline
            - E2E tests passed
          draft: false
          prerelease: false

  build-and-push-images:
    # needs: [e2e-tests, create-release]
    needs: [create-release]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      matrix:
        image:
          - name: production
            dockerfile: Dockerfile
            suffix: ""
          # - name: test
          #   dockerfile: Dockerfile.test
          #   suffix: "-test"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Debug registry info
        run: |
          echo "Registry: ${{ env.REGISTRY }}"
          echo "Image name: ${{ env.IMAGE_NAME }}"
          echo "Actor: ${{ github.actor }}"

      - name: Extract metadata for ${{ matrix.image.name }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.image.suffix }}
          tags: |
            type=raw,value=${{ needs.create-release.outputs.tag }}
            type=raw,value=latest

      - name: Build and push ${{ matrix.image.name }} Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.image.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha,scope=${{ matrix.image.name }}
          cache-to: type=gha,mode=max,scope=${{ matrix.image.name }}
          build-args: |
            VERSION=${{ needs.create-release.outputs.version }}
        env:
          DOCKER_BUILDKIT: 1

  deploy-to-pages:
    # needs: [e2e-tests, create-release, build-and-push-images]
    needs: [create-release, build-and-push-images]
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build
        env:
          NODE_ENV: production

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy-to-server:
    needs: [create-release, build-and-push-images]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Copy docker-compose file to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_SERVER_HOST }}
          username: ${{ secrets.SSH_SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.prod.yml"
          target: "/root/pointid/client/"
      - name: Rename docker-compose file
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_SERVER_HOST }}
          username: ${{ secrets.SSH_SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mv /root/pointid/client/docker-compose.prod.yml /root/pointid/client/docker-compose.yml
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_SERVER_HOST }}
          username: ${{ secrets.SSH_SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # TBC: Should we create an env file in the server instead of exporting here ?
          # Exporting here prevents to store secrets in the server
          script: |
            export IMAGE_REPOSITORY=${{ secrets.IMAGE_REPOSITORY }}
            export CONTAINER_PREFIX=${{ secrets.CONTAINER_PREFIX }}
            export PRODUCTION_GRAPHQL_URL=${{ secrets.PRODUCTION_GRAPHQL_URL }}
            export PRODUCTION_GRAPHQL_WS_URL=${{ secrets.PRODUCTION_GRAPHQL_WS_URL }}
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            
            cd /root/pointid/client
            
            docker compose pull
            docker compose up -d --remove-orphans
